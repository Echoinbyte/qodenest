import { GoogleGenerativeAI } from "@google/generative-ai";

// Access your API key as an environment variable (see "Set up your API key" above)
const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_API_KEY || "");

// The Gemini 1.5 models are versatile and work with most use cases
export default async function executeCode(
  sourceCode: string,
  aboutCode: {
    language: string;
  }
) {
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  let feedPrompt = `
Transform the following ${aboutCode?.language} code into fully functional and error-free JavaScript code by adhering to the following detailed rules and guidelines:

### Rules for Transformation:
1. **JavaScript-Only Output**: 
   - Generate **only the JavaScript code**. Do not include comments, explanations, or additional notes in the output.

2. **String Formatting**: 
   - Use **double quotes** (") for all strings unless single quotes (') are absolutely necessary. 
   - Do not use backticks (\').

3. **Variable and Statement Preservation**: 
   - Keep all variable names, print statements, input statements, and their contents **unaltered**.
   - Ensure the behavior and structure of the original ${aboutCode?.language} code are preserved.

4. **Execution Behavior**:
   - The resulting JavaScript code **must produce the exact same output** as the original ${aboutCode?.language} code, while maintaining the same sequence and behavior of commands.

5. **Output Handling**:
   - Leverage the pre-defined 'output' function for displaying all outputs in the existing 'div' tag with the 'id="output"'. This function has the following signature:
     '''javascript
     output(content: string | HTMLElement, type: "HTMLElement" | "Inline" | "Block" | "Error" = "Block");
     '''
     - **Output Types**:
       - Use '"Block"' for general text or paragraph outputs.
       - Use '"Inline"' for small or inline text outputs.
       - Use '"Error"' for descriptive error messages or issues detected in the original code.
       - Use '"HTMLElement"' for rendering HTML elements in the output.
   - Avoid using 'console.log()' or any other logging method.

6. **Input Handling**:
   - Replace 'prompt()' or other input methods with the pre-defined 'input' function:
     '''javascript
     input(prompt: string): Promise<string>;
     '''
     - The 'input' function is asynchronous and returns a Promise. Use '.then()' to handle the returned value appropriately.

7. **Error-Free JavaScript**:
   - Ensure the generated JavaScript code does not throw any runtime errors, regardless of issues present in the original ${aboutCode?.language} code.
   - If errors are detected in the original code, display a **descriptive error message** using the 'output' function with 'type: "Error"' and provide a clear explanation.

8. **Random Number Generation**:
   - In ${aboutCode?.language}, the 'RANDOMIZE TIMER' statement initializes the random number generator. In JavaScript:
     - Use 'Math.random()' directly instead of 'Math.seedrandom()' to generate random numbers.

9. **Key Note**:
   - Do not recreate or redefine the 'output' and 'input' functions. These are pre-existing utility functions available in the project.
   - All JavaScript output generated by this prompt will be executed using the 'eval()' function in the environment.

### Expectations:
- The JavaScript code must follow the above rules strictly.
- Use proper formatting, indentation, and code structure to ensure readability and maintainability.
- Handle all possible scenarios, including edge cases, to ensure the final JavaScript code behaves as intended.

### Source Code:
Below is the ${aboutCode?.language} code to transform:

${sourceCode}
`;

  const result = await model.generateContent(feedPrompt);
  const response = await result.response;
  const JS_CODE = response.text();

  return JS_CODE;
}
